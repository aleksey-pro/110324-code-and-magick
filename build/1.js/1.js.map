{"version":3,"sources":["webpack:///./src/js/form.js","webpack:///./src/js/game.js","webpack:///./src/js/reviews.js","webpack:///./src/js/review.js","webpack:///./src/js/load.js","webpack:///./src/js/gallery.js"],"names":[],"mappings":";;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAgE;;AAEhE;;AAEA,qDAAoD;;AAEpD;AACA;;AAEA;AACA;AACA,yDAAwD;AACxD,iDAAgD;AAChD,MAAK;AACL,gDAA+C;AAC/C,8CAA6C;AAC7C;;AAEA;AACA;AACA,gDAA+C;AAC/C,MAAK;AACL,6CAA4C;AAC5C;;AAEA;AACA;AACA,iDAAgD;AAChD,MAAK;AACL,8CAA6C;AAC7C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA4C,uBAAuB;AACnE,8CAA6C,uBAAuB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B,+BAA8B;AAC9B,2BAA0B;AAC1B,yBAAwB;AACxB;AACA,qDAAoD;AACpD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACjHD;;AAEA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc;AACd;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,gBAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,iBAAiB;AACtC;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA,sBAAqB,OAAO;AAC5B,uBAAsB;AACtB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,sBAAqB,OAAO;AAC5B,uBAAsB;AACtB;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,sBAAqB,OAAO;AAC5B,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,gBAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,gBAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,uBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,IAAG;;;AAGH;AACA;AACA;AACA;AACA,OAAM;AACN;;;AAGA;;AAEA,EAAC;;;;;;;;;ACxrBD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA,EAAC;;;;;;;ACjDD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,EAAC;;;;;;;ACpDD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,EAAC;;;;;;;ACvBD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA,uFAAsF;AACtF;AACA;AACA;AACA,EAAC","file":"1.js/1.js","sourcesContent":["'use strict';\r\n\r\ndefine(function() {\r\n  var formContainer = document.querySelector('.overlay-container'), // див в котором форма\r\n    formCloseButton = document.querySelector('.review-form-close'), // кнопка закрытия\r\n    formRequired = document.querySelector('.review-form'), // форма\r\n    submitButton = document.querySelector('.review-submit'), // кнопка\r\n    requiredText = document.getElementById('review-text'),  // требуемое поле Отзыв\r\n    requiredName = document.getElementById('review-name'), // требуемое поле Имя\r\n    hidingBlock = document.querySelector('.review-fields'),\r\n    inputsGroup = document.querySelector('.review-form-group'), // группа звездочек\r\n    hidingName = document.querySelector('.review-fields-name'), // скрываемое имя\r\n    hidingTstml = document.querySelector('.review-fields-text');//скрываемый отзыв\r\n\r\n  var diff;\r\n\r\n  submitButton.setAttribute('disabled', 'disabled'); // кнопка отключена\r\n\r\n  function validate() {\r\n    var isFeedbackRequired = Number(formRequired['review-mark'].value) < 3;\r\n\r\n    // Проверяем кнопку отправки и блок с лэйблами\r\n    if (requiredName.value === '' || (isFeedbackRequired && requiredText.value === '')) {\r\n      submitButton.setAttribute('disabled', 'disabled'); // кнопка отключена\r\n      hidingBlock.classList.remove('invisible'); // блок c лэйблами показан\r\n    } else {\r\n      submitButton.removeAttribute('disabled'); // кнопка включена\r\n      hidingBlock.classList.add('invisible'); // блок с лэйблами скрыт\r\n    }\r\n\r\n    // Проверяем поле имя\r\n    if (requiredName.value === '') {\r\n      hidingName.classList.remove('invisible'); // показываем лейбл \"имя\"\r\n    } else {\r\n      hidingName.classList.add('invisible'); // скрываем лейбл \"имя\"\r\n    }\r\n\r\n    // Проверяем поле отзыв\r\n    if (isFeedbackRequired && requiredText.value === '') {\r\n      hidingTstml.classList.remove('invisible'); // показываем лейбл \"отзыв\"\r\n    } else {\r\n      hidingTstml.classList.add('invisible');  // скрываем лейбл \"отзыв\"\r\n    }\r\n  }\r\n\r\n  validate();\r\n\r\n  requiredText.oninput = validate;\r\n  inputsGroup.onchange = function() {\r\n    validate();\r\n    setCookie();\r\n  };\r\n  requiredName.oninput = function() {\r\n    validate();\r\n    setCookie();\r\n  };\r\n\r\n  function setCookie() {\r\n    var cookieName = requiredName.value;\r\n    var cookieStars = formRequired['review-mark'].value;\r\n    Cookies.set('review-name', cookieName, {expires: getDateDiff()});\r\n    Cookies.set('review-mark', cookieStars, {expires: getDateDiff()});\r\n  }\r\n\r\n  //нахождение разности дней\r\n  function getDateDiff() {\r\n    if (diff) {\r\n      return diff;\r\n    }\r\n    var today = new Date(); // определим дату в этом году\r\n    var birthday = new Date(); // определим дату рождения\r\n    birthday.setMonth(11); // установим месяц даты рождения\r\n    birthday.setDate(9); // установим число дня рождения\r\n    if (birthday > today) {\r\n      birthday.setFullYear(today.getFullYear() - 1); //найдем дату рождения в прошлом году\r\n    }\r\n    diff = Math.round((today - birthday) / (24 * 60 * 60 * 1000));\r\n    return diff;\r\n  }\r\n\r\n  document.addEventListener('DOMContentLoaded', insertCookies);\r\n\r\n  function insertCookies() {\r\n    var reviewerName = Cookies.get('review-name');\r\n    if (typeof reviewerName === 'string') {\r\n      requiredName.value = reviewerName;\r\n    }\r\n    formRequired['review-mark'].value = Cookies.get('review-mark');\r\n  }\r\n\r\n  var form = {\r\n    onClose: null,\r\n    /**\r\n     * @param {Function} cb\r\n     */\r\n    open: function(cb) {\r\n      formContainer.classList.remove('invisible');\r\n      cb();\r\n    },\r\n\r\n    close: function() {\r\n      formContainer.classList.add('invisible');\r\n\r\n      if (typeof this.onClose === 'function') {\r\n        this.onClose();\r\n      }\r\n    }\r\n  };\r\n  formCloseButton.onclick = function(evt) {\r\n    evt.preventDefault();\r\n    form.close();\r\n  };\r\n  return form;\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/form.js\n ** module id = 1\n ** module chunks = 1\n **/","'use strict';\r\n\r\ndefine(function() {\r\n  /**\r\n   * @const\r\n   * @type {number}\r\n   */\r\n  var HEIGHT = 300;\r\n  /**\r\n   * @const\r\n   * @type {number}\r\n   */\r\n  var WIDTH = 700;\r\n  /**\r\n   * ID уровней.\r\n   * @enum {number}\r\n   */\r\n  var Level = {\r\n    INTRO: 0,\r\n    MOVE_LEFT: 1,\r\n    MOVE_RIGHT: 2,\r\n    LEVITATE: 3,\r\n    HIT_THE_MARK: 4\r\n  };\r\n  /**\r\n   * Порядок прохождения уровней.\r\n   * @type {Array.<Level>}\r\n   */\r\n  var LevelSequence = [\r\n    Level.INTRO\r\n  ];\r\n  /**\r\n   * Начальный уровень.\r\n   * @type {Level}\r\n   */\r\n  var INITIAL_LEVEL = LevelSequence[0];\r\n  /**\r\n   * Допустимые виды объектов на карте.\r\n   * @enum {number}\r\n   */\r\n  var ObjectType = {\r\n    ME: 0,\r\n    FIREBALL: 1\r\n  };\r\n  /**\r\n   * Допустимые состояния объектов.\r\n   * @enum {number}\r\n   */\r\n  var ObjectState = {\r\n    OK: 0,\r\n    DISPOSED: 1\r\n  };\r\n  /**\r\n   * Коды направлений.\r\n   * @enum {number}\r\n   */\r\n  var Direction = {\r\n    NULL: 0,\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n    UP: 4,\r\n    DOWN: 8\r\n  };\r\n  /**\r\n   * Карта спрайтов игры.\r\n   * @type {Object.<ObjectType, Object>}\r\n   */\r\n  var SpriteMap = {};\r\n  var REVERSED = '-reversed';\r\n  SpriteMap[ObjectType.ME] = {\r\n    width: 61,\r\n    height: 84,\r\n    url: 'img/wizard.gif'\r\n  };\r\n  //TODO: Find a clever way\r\n  SpriteMap[ObjectType.ME + REVERSED] = {\r\n    width: 61,\r\n    height: 84,\r\n    url: 'img/wizard-reversed.gif'\r\n  };\r\n  SpriteMap[ObjectType.FIREBALL] = {\r\n    width: 24,\r\n    height: 24,\r\n    url: 'img/fireball.gif'\r\n  };\r\n  /**\r\n   * Правила перерисовки объектов в зависимости от состояния игры.\r\n   * @type {Object.<ObjectType, function(Object, Object, number): Object>}\r\n   */\r\n  var ObjectsBehaviour = {};\r\n  /**\r\n   * Обновление движения мага. Движение мага зависит от нажатых в данный момент\r\n   * стрелок. Маг может двигаться одновременно по горизонтали и по вертикали.\r\n   * На движение мага влияет его пересечение с препятствиями.\r\n   * @param {Object} object\r\n   * @param {Object} state\r\n   * @param {number} timeframe\r\n   */\r\n  /** Задержка при прокрутке*/\r\n  var THROTTLE_TIMEOUT = 150;\r\n  \r\n  ObjectsBehaviour[ObjectType.ME] = function(object, state, timeframe) {\r\n    // Пока зажата стрелка вверх, маг сначала поднимается, а потом левитирует\r\n    // в воздухе на определенной высоте.\r\n    // NB! Сложность заключается в том, что поведение описано в координатах\r\n    // канваса, а не координатах, относительно нижней границы игры.\r\n    if (state.keysPressed.UP && object.y > 0) {\r\n      object.direction = object.direction & ~Direction.DOWN;\r\n      object.direction = object.direction | Direction.UP;\r\n      object.y -= object.speed * timeframe * 2;\r\n    }\r\n    // Если стрелка вверх не зажата, а маг находится в воздухе, он плавно\r\n    // опускается на землю.\r\n    if (!state.keysPressed.UP) {\r\n      if (object.y < HEIGHT - object.height) {\r\n        object.direction = object.direction & ~Direction.UP;\r\n        object.direction = object.direction | Direction.DOWN;\r\n        object.y += object.speed * timeframe / 3;\r\n      }\r\n    }\r\n    // Если зажата стрелка влево, маг перемещается влево.\r\n    if (state.keysPressed.LEFT) {\r\n      object.direction = object.direction & ~Direction.RIGHT;\r\n      object.direction = object.direction | Direction.LEFT;\r\n      object.x -= object.speed * timeframe;\r\n    }\r\n    // Если зажата стрелка вправо, маг перемещается вправо.\r\n    if (state.keysPressed.RIGHT) {\r\n      object.direction = object.direction & ~Direction.LEFT;\r\n      object.direction = object.direction | Direction.RIGHT;\r\n      object.x += object.speed * timeframe;\r\n    }\r\n    // Ограничения по перемещению по полю. Маг не может выйти за пределы поля.\r\n    if (object.y < 0) {\r\n      object.y = 0;\r\n    }\r\n    if (object.y > HEIGHT - object.height) {\r\n      object.y = HEIGHT - object.height;\r\n    }\r\n    if (object.x < 0) {\r\n      object.x = 0;\r\n    }\r\n    if (object.x > WIDTH - object.width) {\r\n      object.x = WIDTH - object.width;\r\n    }\r\n  };\r\n  /**\r\n   * Обновление движения файрбола. Файрбол выпускается в определенном направлении\r\n   * и после этого неуправляемо движется по прямой в заданном направлении. Если\r\n   * он пролетает весь экран насквозь, он исчезает.\r\n   * @param {Object} object\r\n   * @param {Object} _state\r\n   * @param {number} timeframe\r\n   */\r\n  ObjectsBehaviour[ObjectType.FIREBALL] = function(object, _state, timeframe) {\r\n    if (object.direction & Direction.LEFT) {\r\n      object.x -= object.speed * timeframe;\r\n    }\r\n    if (object.direction & Direction.RIGHT) {\r\n      object.x += object.speed * timeframe;\r\n    }\r\n    if (object.x < 0 || object.x > WIDTH) {\r\n      object.state = ObjectState.DISPOSED;\r\n    }\r\n  };\r\n  /**\r\n   * ID возможных ответов функций, проверяющих успех прохождения уровня.\r\n   * CONTINUE говорит о том, что раунд не закончен и игру нужно продолжать,\r\n   * WIN о том, что раунд выигран, FAIL — о поражении. PAUSE о том, что игру\r\n   * нужно прервать.\r\n   * @enum {number}\r\n   */\r\n  var Verdict = {\r\n    CONTINUE: 0,\r\n    WIN: 1,\r\n    FAIL: 2,\r\n    PAUSE: 3,\r\n    INTRO: 4\r\n  };\r\n  /**\r\n   * Правила завершения уровня. Ключами служат ID уровней, значениями функции\r\n   * принимающие на вход состояние уровня и возвращающие true, если раунд\r\n   * можно завершать или false если нет.\r\n   * @type {Object.<Level, function(Object):boolean>}\r\n   */\r\n  var LevelsRules = {};\r\n  /**\r\n   * Уровень считается пройденным, если был выпущен файлболл и он улетел\r\n   * за экран.\r\n   * @param {Object} state\r\n   * @return {Verdict}\r\n   */\r\n  LevelsRules[Level.INTRO] = function(state) {\r\n    var fireballs = state.garbage.filter(function(object) {\r\n      return object.type === ObjectType.FIREBALL;\r\n    });\r\n    return fireballs.length ? Verdict.WIN : Verdict.CONTINUE;\r\n  };\r\n  /**\r\n   * Начальные условия для уровней.\r\n   * @enum {Object.<Level, function>}\r\n   */\r\n  var LevelsInitialize = {};\r\n  /**\r\n   * Первый уровень.\r\n   * @param {Object} state\r\n   * @return {Object}\r\n   */\r\n  LevelsInitialize[Level.INTRO] = function(state) {\r\n    state.objects.push(\r\n      // Установка персонажа в начальное положение. Он стоит в крайнем левом\r\n      // углу экрана, глядя вправо. Скорость перемещения персонажа на этом\r\n      // уровне равна 2px за кадр.\r\n      {\r\n        direction: Direction.RIGHT,\r\n        height: 84,\r\n        speed: 2,\r\n        sprite: SpriteMap[ObjectType.ME],\r\n        state: ObjectState.OK,\r\n        type: ObjectType.ME,\r\n        width: 61,\r\n        x: WIDTH / 3,\r\n        y: HEIGHT - 100\r\n      }\r\n    );\r\n    return state;\r\n  };\r\n  /**\r\n   * Конструктор объекта Game. Создает canvas, добавляет обработчики событий\r\n   * и показывает приветственный экран.\r\n   * @param {Element} container\r\n   * @constructor\r\n   */\r\n  var Game = function(container) {\r\n    this.container = container;\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = container.clientWidth;\r\n    this.canvas.height = container.clientHeight;\r\n    this.container.appendChild(this.canvas);\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.demoBlock = document.querySelector('.demo');\r\n    this._onKeyDown = this._onKeyDown.bind(this);\r\n    this._onKeyUp = this._onKeyUp.bind(this);\r\n    this._pauseListener = this._pauseListener.bind(this);\r\n    this.setDeactivated(false);\r\n    this.optimizedScroll = this.optimizedScroll.bind(this);\r\n  };\r\n  Game.prototype = {\r\n    /**\r\n     * Текущий уровень игры.\r\n     * @type {Level}\r\n     */\r\n    level: INITIAL_LEVEL,\r\n    /** @param {boolean} deactivated */\r\n    setDeactivated: function(deactivated) {\r\n      if (this._deactivated === deactivated) {\r\n        return;\r\n      }\r\n      this._deactivated = deactivated;\r\n      if (deactivated) {\r\n        this._removeGameListeners();\r\n      } else {\r\n        this._initializeGameListeners();\r\n      }\r\n    },\r\n    /**\r\n     * Состояние игры. Описывает местоположение всех объектов на игровой карте\r\n     * и время проведенное на уровне и в игре.\r\n     * @return {Object}\r\n     */\r\n    getInitialState: function() {\r\n      return {\r\n        // Статус игры. Если CONTINUE, то игра продолжается.\r\n        currentStatus: Verdict.CONTINUE,\r\n        // Объекты, удаленные на последнем кадре.\r\n        garbage: [],\r\n        // Время с момента отрисовки предыдущего кадра.\r\n        lastUpdated: null,\r\n        // Состояние нажатых клавиш.\r\n        keysPressed: {\r\n          ESC: false,\r\n          LEFT: false,\r\n          RIGHT: false,\r\n          SPACE: false,\r\n          UP: false\r\n        },\r\n        // Время начала прохождения уровня.\r\n        levelStartTime: null,\r\n        // Все объекты на карте.\r\n        objects: [],\r\n        // Время начала прохождения игры.\r\n        startTime: null\r\n      };\r\n    },\r\n    /**\r\n     * Начальные проверки и запуск текущего уровня.\r\n     * @param {boolean=} restart\r\n     */\r\n    initializeLevelAndStart: function(restart) {\r\n      restart = typeof restart === 'undefined' ? true : restart;\r\n      if (restart || !this.state) {\r\n        // При перезапуске уровня, происходит полная перезапись состояния\r\n        // игры из изначального состояния.\r\n        this.state = this.getInitialState();\r\n        this.state = LevelsInitialize[this.level](this.state);\r\n      } else {\r\n        // При продолжении уровня состояние сохраняется, кроме записи о том,\r\n        // что состояние уровня изменилось с паузы на продолжение игры.\r\n        this.state.currentStatus = Verdict.CONTINUE;\r\n      }\r\n      // Запись времени начала игры и времени начала уровня.\r\n      this.state.levelStartTime = Date.now();\r\n      if (!this.state.startTime) {\r\n        this.state.startTime = this.state.levelStartTime;\r\n      }\r\n      this._preloadImagesForLevel(function() {\r\n        // Предварительная отрисовка игрового экрана.\r\n        this.render();\r\n        // Установка обработчиков событий.\r\n        this._initializeGameListeners();\r\n        // Запуск игрового цикла.\r\n        this.update();\r\n      }.bind(this));\r\n    },\r\n    /**\r\n     * Временная остановка игры.\r\n     * @param {Verdict=} verdict\r\n     */\r\n    pauseLevel: function(verdict) {\r\n      if (verdict) {\r\n        this.state.currentStatus = verdict;\r\n      }\r\n      this.state.keysPressed.ESC = false;\r\n      this.state.lastUpdated = null;\r\n      this._removeGameListeners();\r\n      window.addEventListener('keydown', this._pauseListener);\r\n      this._drawPauseScreen();\r\n    },\r\n    /**\r\n     * Обработчик событий клавиатуры во время паузы.\r\n     * @param {KeyboardsEvent} evt\r\n     * @private\r\n     * @private\r\n     */\r\n    _pauseListener: function(evt) {\r\n      if (evt.keyCode === 32 && !this._deactivated) {\r\n        evt.preventDefault();\r\n        var needToRestartTheGame = this.state.currentStatus === Verdict.WIN ||\r\n          this.state.currentStatus === Verdict.FAIL;\r\n        this.initializeLevelAndStart(needToRestartTheGame);\r\n        window.removeEventListener('keydown', this._pauseListener);\r\n      }\r\n    },\r\n    /**\r\n     * Отрисовка экрана паузы.\r\n     */\r\n    _drawPauseScreen: function() {\r\n      var ctx = this.ctx;\r\n      var maxWidth = 200;\r\n      var marginLeft = 230;\r\n      var marginTop = 60;\r\n      var lineHeight = 25;\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n      ctx.fillRect(230, 30, 250, 150);\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.fillRect(220, 20, 250, 150);\r\n      ctx.font = '18px PT Mono';\r\n      ctx.fillStyle = '#000000';\r\n      function drawPause(text) {\r\n        var words = text.split(' ');\r\n        var countWords = words.length;\r\n        var line = ' ';\r\n        for (var n = 0; n < countWords; n++) {\r\n          var testLine = line + words[n] + ' ';\r\n          var testWidth = ctx.measureText(testLine).width;\r\n          if (testWidth > maxWidth) {\r\n            ctx.fillText(line, marginLeft, marginTop);\r\n            line = words[n] + ' ';\r\n            marginTop += lineHeight;\r\n          } else {\r\n            line = testLine;\r\n          }\r\n        }\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n      }\r\n      switch (this.state.currentStatus) {\r\n        case Verdict.WIN:\r\n          drawPause('Вы выиграли! Поздравляем с победой!!!');\r\n          break;\r\n        case Verdict.FAIL:\r\n          drawPause('Вы проиграли! Не отчаивайтесь и попробуйте еще раз.');\r\n          break;\r\n        case Verdict.PAUSE:\r\n          drawPause('Вы нажали на паузу! Еще раз на пробел чтобы снять с паузы.');\r\n          break;\r\n        case Verdict.INTRO:\r\n          drawPause('Приветсвуем Вас в игре! Начинаем сражение и вперед!');\r\n          break;\r\n      }\r\n    },\r\n    /**\r\n     * Предзагрузка необходимых изображений для уровня.\r\n     * @param {function} callback\r\n     * @private\r\n     */\r\n    _preloadImagesForLevel: function(callback) {\r\n      if (typeof this._imagesArePreloaded === 'undefined') {\r\n        this._imagesArePreloaded = [];\r\n      }\r\n      if (this._imagesArePreloaded[this.level]) {\r\n        callback();\r\n        return;\r\n      }\r\n      var keys = Object.keys(SpriteMap);\r\n      var imagesToGo = keys.length;\r\n      var self = this;\r\n      var loadSprite = function(sprite) {\r\n        var image = new Image(sprite.width, sprite.height);\r\n        image.onload = function() {\r\n          sprite.image = image;\r\n          if (--imagesToGo === 0) {\r\n            self._imagesArePreloaded[self.level] = true;\r\n            callback();\r\n          }\r\n        };\r\n        image.src = sprite.url;\r\n      };\r\n      for (var i = 0; i < keys.length; i++) {\r\n        loadSprite(SpriteMap[keys[i]]);\r\n      }\r\n    },\r\n    /**\r\n     * Обновление статуса объектов на экране. Добавляет объекты, которые должны\r\n     * появиться, выполняет проверку поведения всех объектов и удаляет те, которые\r\n     * должны исчезнуть.\r\n     * @param {number} delta Время, прошеднее с отрисовки прошлого кадра.\r\n     */\r\n    updateObjects: function(delta) {\r\n      // Персонаж.\r\n      var me = this.state.objects.filter(function(object) {\r\n        return object.type === ObjectType.ME;\r\n      })[0];\r\n      // Добавляет на карту файрбол по нажатию на Shift.\r\n      if (this.state.keysPressed.SHIFT) {\r\n        this.state.objects.push({\r\n          direction: me.direction,\r\n          height: 24,\r\n          speed: 5,\r\n          sprite: SpriteMap[ObjectType.FIREBALL],\r\n          type: ObjectType.FIREBALL,\r\n          width: 24,\r\n          x: me.direction & Direction.RIGHT ? me.x + me.width : me.x - 24,\r\n          y: me.y + me.height / 2\r\n        });\r\n        this.state.keysPressed.SHIFT = false;\r\n      }\r\n      this.state.garbage = [];\r\n      // Убирает в garbage не используемые на карте объекты.\r\n      var remainingObjects = this.state.objects.filter(function(object) {\r\n        ObjectsBehaviour[object.type](object, this.state, delta);\r\n        if (object.state === ObjectState.DISPOSED) {\r\n          this.state.garbage.push(object);\r\n          return false;\r\n        }\r\n        return true;\r\n      }, this);\r\n      this.state.objects = remainingObjects;\r\n    },\r\n    /**\r\n     * Проверка статуса текущего уровня.\r\n     */\r\n    checkStatus: function() {\r\n      // Нет нужны запускать проверку, нужно ли останавливать уровень, если\r\n      // заранее известно, что да.\r\n      if (this.state.currentStatus !== Verdict.CONTINUE) {\r\n        return;\r\n      }\r\n      if (!this.commonRules) {\r\n        /**\r\n         * Проверки, не зависящие от уровня, но влияющие на его состояние.\r\n         * @type {Array.<functions(Object):Verdict>}\r\n         */\r\n        this.commonRules = [\r\n          /**\r\n           * Если персонаж мертв, игра прекращается.\r\n           * @param {Object} state\r\n           * @return {Verdict}\r\n           */\r\n            function(state) {\r\n            var me = state.objects.filter(function(object) {\r\n              return object.type === ObjectType.ME;\r\n            })[0];\r\n            return me.state === ObjectState.DISPOSED ?\r\n              Verdict.FAIL :\r\n              Verdict.CONTINUE;\r\n          },\r\n          /**\r\n           * Если нажата клавиша Esc игра ставится на паузу.\r\n           * @param {Object} state\r\n           * @return {Verdict}\r\n           */\r\n            function(state) {\r\n            return state.keysPressed.ESC ? Verdict.PAUSE : Verdict.CONTINUE;\r\n          },\r\n          /**\r\n           * Игра прекращается если игрок продолжает играть в нее два часа подряд.\r\n           * @param {Object} state\r\n           * @return {Verdict}\r\n           */\r\n            function(state) {\r\n            return Date.now() - state.startTime > 3 * 60 * 1000 ?\r\n              Verdict.FAIL :\r\n              Verdict.CONTINUE;\r\n          }\r\n        ];\r\n      }\r\n      // Проверка всех правил влияющих на уровень. Запускаем цикл проверок\r\n      // по всем универсальным проверкам и проверкам конкретного уровня.\r\n      // Цикл продолжается до тех пор, пока какая-либо из проверок не вернет\r\n      // любое другое состояние кроме CONTINUE или пока не пройдут все\r\n      // проверки. После этого состояние сохраняется.\r\n      var allChecks = this.commonRules.concat(LevelsRules[this.level]);\r\n      var currentCheck = Verdict.CONTINUE;\r\n      var currentRule;\r\n      while (currentCheck === Verdict.CONTINUE && allChecks.length) {\r\n        currentRule = allChecks.shift();\r\n        currentCheck = currentRule(this.state);\r\n      }\r\n      this.state.currentStatus = currentCheck;\r\n    },\r\n    /**\r\n     * Принудительная установка состояния игры. Используется для изменения\r\n     * состояния игры от внешних условий, например, когда необходимо остановить\r\n     * игру, если она находится вне области видимости и установить вводный\r\n     * экран.\r\n     * @param {Verdict} status\r\n     */\r\n    setGameStatus: function(status) {\r\n      if (this.state.currentStatus !== status) {\r\n        this.state.currentStatus = status;\r\n      }\r\n    },\r\n    optimizedScroll: function() {\r\n      if (this.demoBlock.getBoundingClientRect().bottom <= 0 ) {\r\n        console.log('no game');\r\n        this.setGameStatus(Game.Verdict.PAUSE);\r\n      }\r\n    },\r\n    /**\r\n     * Отрисовка всех объектов на экране.\r\n     */\r\n    render: function() {\r\n      // Удаление всех отрисованных на странице элементов.\r\n      this.ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n      // Выставление всех элементов, оставшихся в this.state.objects согласно\r\n      // их координатам и направлению.\r\n      this.state.objects.forEach(function(object) {\r\n        if (object.sprite) {\r\n          var reversed = object.direction & Direction.LEFT;\r\n          var sprite = SpriteMap[object.type + (reversed ? REVERSED : '')] || SpriteMap[object.type];\r\n          this.ctx.drawImage(sprite.image, object.x, object.y, object.width, object.height);\r\n        }\r\n      }, this);\r\n    },\r\n    /**\r\n     * Основной игровой цикл. Сначала проверяет состояние всех объектов игры\r\n     * и обновляет их согласно правилам их поведения, а затем запускает\r\n     * проверку текущего раунда. Рекурсивно продолжается до тех пор, пока\r\n     * проверка не вернет состояние FAIL, WIN или PAUSE.\r\n     */\r\n    update: function() {\r\n      if (!this.state.lastUpdated) {\r\n        this.state.lastUpdated = Date.now();\r\n      }\r\n      var delta = (Date.now() - this.state.lastUpdated) / 10;\r\n      this.updateObjects(delta);\r\n      this.checkStatus();\r\n      switch (this.state.currentStatus) {\r\n        case Verdict.CONTINUE:\r\n          this.state.lastUpdated = Date.now();\r\n          this.render();\r\n          requestAnimationFrame(function() {\r\n            this.update();\r\n          }.bind(this));\r\n          break;\r\n        case Verdict.WIN:\r\n        case Verdict.FAIL:\r\n        case Verdict.PAUSE:\r\n        case Verdict.INTRO:\r\n          this.pauseLevel();\r\n          break;\r\n      }\r\n    },\r\n    /**\r\n     * @param {KeyboardEvent} evt [description]\r\n     * @private\r\n     */\r\n    _onKeyDown: function(evt) {\r\n      switch (evt.keyCode) {\r\n        case 37:\r\n          this.state.keysPressed.LEFT = true;\r\n          break;\r\n        case 39:\r\n          this.state.keysPressed.RIGHT = true;\r\n          break;\r\n        case 38:\r\n          this.state.keysPressed.UP = true;\r\n          break;\r\n        case 27:\r\n          this.state.keysPressed.ESC = true;\r\n          break;\r\n      }\r\n      if (evt.shiftKey) {\r\n        this.state.keysPressed.SHIFT = true;\r\n      }\r\n    },\r\n    /**\r\n     * @param {KeyboardEvent} evt [description]\r\n     * @private\r\n     */\r\n    _onKeyUp: function(evt) {\r\n      switch (evt.keyCode) {\r\n        case 37:\r\n          this.state.keysPressed.LEFT = false;\r\n          break;\r\n        case 39:\r\n          this.state.keysPressed.RIGHT = false;\r\n          break;\r\n        case 38:\r\n          this.state.keysPressed.UP = false;\r\n          break;\r\n        case 27:\r\n          this.state.keysPressed.ESC = false;\r\n          break;\r\n      }\r\n      if (evt.shiftKey) {\r\n        this.state.keysPressed.SHIFT = false;\r\n      }\r\n    },\r\n    /** @private */\r\n    _initializeGameListeners: function() {\r\n      window.addEventListener('keydown', this._onKeyDown);\r\n      window.addEventListener('keyup', this._onKeyUp);\r\n    },\r\n    /** @private */\r\n    _removeGameListeners: function() {\r\n      window.removeEventListener('keydown', this._onKeyDown);\r\n      window.removeEventListener('keyup', this._onKeyUp);\r\n    }\r\n  };\r\n  Game.Verdict = Verdict;\r\n  \r\n  var lastCall = Date.now();\r\n  var clouds = document.getElementsByClassName('header-clouds')[0];\r\n  window.addEventListener('scroll', parlx);\r\n  \r\n  function parlx() {\r\n    if (Date.now() - lastCall >= THROTTLE_TIMEOUT && clouds.getBoundingClientRect().bottom > 0) {\r\n      clouds.style.backgroundPositionX = parseInt(document.body.scrollTop * -0.5) + 'px';\r\n    }\r\n    lastCall = Date.now();\r\n  }\r\n\r\n\r\n    var throttle = function(type, name, obj) {\r\n      obj = obj || window;\r\n      var running = false;\r\n      var func = function() {\r\n        if (running) { return; }\r\n        running = true;\r\n        requestAnimationFrame(function() {\r\n          obj.dispatchEvent(new CustomEvent(name));\r\n          running = false;\r\n        });\r\n      };\r\n      obj.addEventListener(type, func);\r\n    };\r\n\r\n    throttle (\"scroll\", \"optimizedScroll\");\r\n\r\n\r\n  window.addEventListener(\"optimizedScroll\", function() {\r\n    // Do your thing\r\n  });\r\n\r\n\r\n  // var optimizedScroll = throttle(function() {\r\n  //   if (!isVisible(document.querySelector('.game'))) {\r\n  //     window.game.setStatus(window.Game.Verdict.PAUSE);\r\n  //   }\r\n  // }, 100);\r\n  // window.addEventListener('scroll', optimizedScroll);\r\n\r\n  \r\n  return Game;\r\n  \r\n});\r\n\r\n\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/game.js\n ** module id = 2\n ** module chunks = 1\n **/","'use strict';\r\n\r\n//отрисовка всего списка\r\n\r\ndefine(['./review', './load'], function(Review, load) {\r\n  var REVIEWS_LOAD_URL = 'http://localhost:1507/api/reviews';\r\n  var pagesPerBlock = 3;\r\n  var pageNumber = 0;\r\n\r\n  var container = document.querySelector('.reviews-list');\r\n  var filters = document.querySelector('.reviews-filter');\r\n  var activeFilter = 'reviews-all';\r\n  var moreButton = document.querySelector('.reviews-controls-more');\r\n  moreButton.classList.remove('invisible');\r\n\r\n  var renderReviews = function(data) {\r\n    data.forEach(function(review) {\r\n      var reviewEl = new Review(review);\r\n      container.appendChild(reviewEl.element);\r\n    });\r\n  };\r\n\r\n  var loadReviews = function(filter, currentPage) {\r\n    load(REVIEWS_LOAD_URL, {\r\n      from: currentPage * pagesPerBlock,\r\n      to: currentPage * pagesPerBlock + pagesPerBlock,\r\n      filter: filter\r\n    }, renderReviews);\r\n  };\r\n\r\n  moreButton.addEventListener('click', function() {\r\n    loadReviews(activeFilter, ++pageNumber);\r\n  });\r\n\r\n  var changeFilter = function(filterID) {\r\n    container.innerHTML = '';\r\n    pageNumber = 0;\r\n    activeFilter = filterID;\r\n    loadReviews(filterID, pageNumber);\r\n  };\r\n\r\n  var change = filters.addEventListener('click', function(evt) {\r\n    if (evt.target.name === 'reviews') {\r\n      changeFilter(evt.target.id);\r\n    }\r\n  }, true);\r\n\r\n  changeFilter(activeFilter);\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/reviews.js\n ** module id = 3\n ** module chunks = 1\n **/","'use strict';\r\n\r\n//отрисовка одного элемента списка\r\n\r\ndefine(function() {\r\n\r\n  var Review = function(data) {\r\n    this.data = data;\r\n    this.element = this.createReviewElement(data);\r\n    var self = this;\r\n    this.quizContainer = this.element.querySelector('.review-quiz');\r\n    this.quizElems = this.element.querySelectorAll('.review-quiz-answer');\r\n    this.quizContainer.onclick = function(event) {\r\n      if (event.target.tagName !== 'SPAN') {\r\n        return;\r\n      }\r\n      for (var i = 0; i < self.quizElems.length; i++) {\r\n        if (self.quizElems[i].classList.contains('review-quiz-answer-active')) {\r\n          self.quizElems[i].classList.remove('review-quiz-answer-active');\r\n        }\r\n        event.target.classList.add('review-quiz-answer-active');\r\n      }\r\n    };\r\n    this.remove = function() {\r\n      this.quizContainer.onclick = null;\r\n    };\r\n  };\r\n\r\n  Review.prototype.createReviewElement = function(data) {\r\n    var template = document.querySelector('#review-template');\r\n    var container = 'content' in template ? template.content : template;\r\n    var element = container.querySelector('.review').cloneNode(true);\r\n    element.querySelector('.review-rating').textContent = data.rating;\r\n    element.querySelector('.review-text').textContent = data.description;\r\n    var image = new Image();\r\n    image.onload = function() {\r\n      var imgTag = element.querySelector('.review-author');\r\n      imgTag.src = data.author.picture;\r\n      imgTag.alt = data.author.name;\r\n      imgTag.title = data.author.name;\r\n      imgTag.height = 124;\r\n      imgTag.width = 124;\r\n    };\r\n    image.onerror = function() {\r\n      element.classList.add('review-load-failure');\r\n    };\r\n    image.src = data.author.picture;\r\n    return element;\r\n  };\r\n\r\n  return Review;\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/review.js\n ** module id = 4\n ** module chunks = 1\n **/","'use strict';\r\n\r\n//загрузка с сервера\r\n\r\ndefine(function() {\r\n  var getSearchString = function(params) {\r\n    return Object.keys(params).map(function(param) {\r\n      return [param, params[param]].join('=');\r\n    }).join('&');\r\n  };\r\n\r\n  return function(url, params, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.onload = function(evt) {\r\n      var loadedData = JSON.parse(evt.target.response);\r\n      callback(loadedData);\r\n    };\r\n\r\n    xhr.open('GET', url + '?' + getSearchString(params));\r\n\r\n    xhr.send();\r\n  };\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/load.js\n ** module id = 5\n ** module chunks = 1\n **/","'use strict';\r\n\r\ndefine(function() {\r\n  var Gallery = function(sources) {\r\n\r\n// Свойства объекта\r\n    this.galleryContainer = document.querySelector('.overlay-gallery');\r\n    this.closeElement = this.galleryContainer.querySelector('.overlay-gallery-close');\r\n    this.leftArrow = this.galleryContainer.querySelector('.overlay-gallery-control-left');\r\n    this.rightArrow = this.galleryContainer.querySelector('.overlay-gallery-control-right');\r\n    this.picturesContainer = this.galleryContainer.querySelector('.overlay-gallery-preview');\r\n    this.previewNumber = this.galleryContainer.querySelector('.preview-number-current');\r\n    this.totalNumber = this.galleryContainer.querySelector('.preview-number-total');\r\n    this.pictures = sources;\r\n    this.totalNumber.textContent = this.pictures.length;\r\n  };\r\n\r\n// Методы объекта\r\n\r\n//show принимает на вход число\r\n  Gallery.prototype.show = function(index) {\r\n//  Показывает фотогалерею, убирая у ее DOM-элемента класс invisible.\r\n    this.galleryContainer.classList.remove('invisible');\r\n//  Вызывает метод setActivePicture, передав в него параметром число,\r\n// которое было передано параметром в show.\r\n    this.setActivePicture(index);\r\n// Добавляем обработчики событий DOM-элементам галереи\r\n    var self = this;\r\n//hide убирает фотогалерею\r\n    this.closeElement.onclick = function() {\r\n      self.hide();\r\n    };\r\n//перелистывание\r\n    this.leftArrow.onclick = function() {\r\n      self.moveleft();\r\n    };\r\n    this.rightArrow.onclick = function() {\r\n      self.moveright();\r\n    };\r\n  };\r\n\r\n//setActivePicture принимает на вход число и записывает его в свойство activePicture.\r\n  Gallery.prototype.setActivePicture = function(index) {\r\n    this.activePicture = index;\r\n//Если в блоке overlay-gallery-preview уже есть фотография, ее нужно предварительно\r\n// удалить (или воспользоваться методом replaceChild).\r\n    if (this.activePictureImage) {\r\n      this.activePictureImage.parentNode.removeChild(this.activePictureImage);\r\n    }\r\n//После этого находит в массиве pictures фотографию с нужным индексом,\r\n// создает для нее DOM-элемент Image с помощью конструктора, записывает\r\n// ему src нужной фотографии и ставит его в конец блока overlay-gallery-preview.\r\n    this.activePictureImage = new Image();\r\n    this.activePictureImage.src = this.pictures[index];\r\n    this.picturesContainer.appendChild(this.activePictureImage);\r\n    this.activePictureImage.height = 300;\r\n    this.activePictureImage.width = 300;\r\n    this.previewNumber.textContent = index + 1;\r\n  };\r\n\r\n//     Обработчики событий\r\n\r\n// Обработчик события click по элементу gallery-overlay-close, который вызывает метод hide.\r\n  Gallery.prototype.hide = function() {\r\n    this.galleryContainer.classList.add('invisible');\r\n    this.closeElement.onclick = null;\r\n    this.leftArrow.onclick = null;\r\n    this.rightArrow.onclick = null;\r\n  };\r\n// Обработчик события click по элементам overlay-gallery-control-left\r\n// и overlay-gallery-control-right, которые показывают, соответственно\r\n// следующую или предыдущую фотографию из списка вызывая метод setActivePicture\r\n// с соответствующим параметром. Показ галереи не зацикливается, например, если\r\n// мы находимся на последней фотографии, при клике на контрол, переключающий\r\n// на следующую фотографию ничего не происходит.\r\n\r\n  Gallery.prototype.moveleft = function() {\r\n    this.setActivePicture(Math.max(this.activePicture - 1, 0)); // чтобы индекс не был меньше нуля\r\n  };\r\n  // };\r\n  Gallery.prototype.moveright = function() {\r\n    this.setActivePicture(Math.min(this.activePicture + 1, this.pictures.length - 1)); //чтобы индекс\r\n    // не был больше последнего индекса в массиве картинок\r\n  };\r\n  return Gallery;\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/gallery.js\n ** module id = 6\n ** module chunks = 1\n **/"],"sourceRoot":""}